// Generated by CoffeeScript 1.12.7
(function() {
  var Neos, convertToSimpleObject, j, javaScript, l, len, len1, ref, ref1, ref2, ref3, ref4, ref5, stylesheet,
    hasProp = {}.hasOwnProperty;

  Neos = window.Neos || {};

  window.Neos = Neos;

  Neos.Form = Neos.Form || {};

  window.onbeforeunload = function(e) {
    var text;
    if (!Neos.Form.YamlBuilder.Model.Form.get('unsavedContent')) {
      return void 0;
    }
    e = e || window.event;
    text = 'There is unsaved content. Are you sure that you want to close the browser?';
    if (e) {
      e.returnValue = text;
    }
    return text;
  };

  window.onerror = function(errorMessage, url, lineNumber) {
    alert("There was a JavaScript error in File " + url + ", line " + lineNumber + ": " + errorMessage + ". Please report the error to the developers");
    return false;
  };

  Neos.Form.YamlBuilder = Ember.Application.create({
    rootElement: 'body'
  });

  Neos.Form.YamlBuilder.Configuration = window.NEOS_FORM_YAMLBUILDER_CONFIGURATION;

  if ((ref = Neos.Form.YamlBuilder.Configuration) != null ? ref.stylesheets : void 0) {
    ref1 = Neos.Form.YamlBuilder.Configuration.stylesheets;
    for (j = 0, len = ref1.length; j < len; j++) {
      stylesheet = ref1[j];
      $('head').append($('<link rel="stylesheet" />').attr('href', stylesheet));
    }
  }

  if ((ref2 = Neos.Form.YamlBuilder.Configuration) != null ? ref2.javaScripts : void 0) {
    ref3 = Neos.Form.YamlBuilder.Configuration.javaScripts;
    for (l = 0, len1 = ref3.length; l < len1; l++) {
      javaScript = ref3[l];
      $.getScript(javaScript);
    }
  }

  if ((ref4 = Neos.Form.YamlBuilder.Configuration) != null ? ref4.formPersistenceIdentifier : void 0) {
    $.getJSON(Neos.Form.YamlBuilder.Configuration.endpoints.loadForm, {
      formPersistenceIdentifier: (ref5 = Neos.Form.YamlBuilder.Configuration) != null ? ref5.formPersistenceIdentifier : void 0
    }, (function(_this) {
      return function(data, textStatus, jqXHR) {
        Neos.Form.YamlBuilder.Model.Form.set('formDefinition', Neos.Form.YamlBuilder.Model.Renderable.create(data));
        return Neos.Form.YamlBuilder.Model.Form.set('unsavedContent', false);
      };
    })(this));
  }

  Neos.Form.YamlBuilder.Validators = {};

  Neos.Form.YamlBuilder.Validators.isNumberOrBlank = function(n) {
    if (n === '' || n === null || n === void 0) {
      return true;
    }
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  Neos.Form.YamlBuilder.Utility = {};

  convertToSimpleObject = function(input) {
    var key, simpleObject, value;
    simpleObject = {};
    for (key in input) {
      if (!hasProp.call(input, key)) continue;
      value = input[key];
      if (key.match(/^__/) || key === 'parentRenderable') {
        continue;
      }
      if (typeof value === 'function') {

      } else if (typeof value === 'object') {
        simpleObject[key] = convertToSimpleObject(value);
      } else {
        simpleObject[key] = value;
      }
    }
    return simpleObject;
  };

  Neos.Form.YamlBuilder.Utility.convertToSimpleObject = convertToSimpleObject;

  Neos.Form.YamlBuilder.Utility.getUri = function(baseUri, presetName) {
    var uri;
    if (presetName == null) {
      presetName = Neos.Form.YamlBuilder.Configuration.presetName;
    }
    uri = baseUri + ("?formPersistenceIdentifier=" + (encodeURIComponent(Neos.Form.YamlBuilder.Configuration.formPersistenceIdentifier)) + "&presetName=" + (encodeURIComponent(presetName)));
    return uri;
  };

  Neos.Form.YamlBuilder.Model = {};

  Neos.Form.YamlBuilder.Model.Form = Ember.Object.create({
    formDefinition: null,
    unsavedContent: false,
    currentlySelectedRenderable: null,
    saveStatus: '',
    save: function(callback) {
      var formDefinition, ref6;
      if (callback == null) {
        callback = null;
      }
      this.set('saveStatus', 'currently-saving');
      formDefinition = Neos.Form.YamlBuilder.Utility.convertToSimpleObject(this.get('formDefinition'));
      return $.post(Neos.Form.YamlBuilder.Configuration.endpoints.saveForm, {
        formPersistenceIdentifier: (ref6 = Neos.Form.YamlBuilder.Configuration) != null ? ref6.formPersistenceIdentifier : void 0,
        formDefinition: formDefinition,
        __csrfToken: Neos.Form.YamlBuilder.Configuration.csrfToken
      }, (function(_this) {
        return function(data, textStatus, jqXHR) {
          if (data === 'success') {
            _this.set('saveStatus', 'saved');
            _this.set('unsavedContent', false);
            if (callback) {
              return callback(true);
            }
          } else {
            _this.set('saveStatus', 'save-error');
            if (callback) {
              return callback(false);
            }
          }
        };
      })(this));
    },
    onFormDefinitionChange: (function() {
      if (!this.get('formDefinition')) {
        return;
      }
      return this.set('currentlySelectedRenderable', this.get('formDefinition'));
    }).observes('formDefinition'),
    contentChanged: (function() {
      return this.set('unsavedContent', true);
    }).observes('formDefinition.__nestedPropertyChange')
  });

  Neos.Form.YamlBuilder.Model.Renderable = Ember.Object.extend({
    parentRenderable: null,
    renderables: null,
    __nestedPropertyChange: 0,
    type: null,
    typeDefinition: (function() {
      var formElementTypeName;
      formElementTypeName = this.get('type');
      if (!formElementTypeName) {
        return null;
      }
      return Neos.Form.YamlBuilder.Model.FormElementTypes.get(formElementTypeName);
    }).property('type').cacheable(),
    init: function() {
      this.renderables = [];
      return this.renderables.addArrayObserver(this);
    },
    setUnknownProperty: function(k, v) {
      this[k] = v;
      this.addObserver(k, this, 'somePropertyChanged');
      return this.somePropertyChanged(this, k);
    },
    setPathRecursively: function(path, v) {
      var currentObject, firstPartOfPath;
      currentObject = this;
      while (path.indexOf('.') > 0) {
        firstPartOfPath = path.slice(0, path.indexOf('.'));
        path = path.slice(firstPartOfPath.length + 1);
        if (!Ember.get(currentObject, firstPartOfPath)) {
          currentObject[firstPartOfPath] = {};
        }
        currentObject = Ember.get(currentObject, firstPartOfPath);
      }
      return currentObject[path] = v;
    },
    somePropertyChanged: function(theInstance, propertyName) {
      this.set('__nestedPropertyChange', this.get('__nestedPropertyChange') + 1);
      if (this.parentRenderable) {
        return this.parentRenderable.somePropertyChanged(this.parentRenderable, "renderables." + (this.parentRenderable.get('renderables').indexOf(this)) + "." + propertyName);
      }
    },
    arrayWillChange: function(subArray, startIndex, removeCount, addCount) {
      var i, m, ref6, ref7, results;
      results = [];
      for (i = m = ref6 = startIndex, ref7 = startIndex + removeCount; ref6 <= ref7 ? m < ref7 : m > ref7; i = ref6 <= ref7 ? ++m : --m) {
        results.push(subArray.objectAt(i).set('parentRenderable', null));
      }
      return results;
    },
    arrayDidChange: function(subArray, startIndex, removeCount, addCount) {
      var i, m, ref6, ref7;
      for (i = m = ref6 = startIndex, ref7 = startIndex + addCount; ref6 <= ref7 ? m < ref7 : m > ref7; i = ref6 <= ref7 ? ++m : --m) {
        subArray.objectAt(i).set('parentRenderable', this);
      }
      this.set('__nestedPropertyChange', this.get('__nestedPropertyChange') + 1);
      if (this.parentRenderable) {
        return this.parentRenderable.somePropertyChanged(this.parentRenderable, "renderables." + (this.parentRenderable.get('renderables').indexOf(this)) + ".renderables");
      }
    },
    _path: (function() {
      if (this.parentRenderable) {
        return (this.parentRenderable.get('_path')) + ".renderables." + (this.parentRenderable.get('renderables').indexOf(this));
      } else {
        return '';
      }
    }).property(),
    findEnclosingPage: function() {
      var referenceRenderable;
      referenceRenderable = this;
      while (referenceRenderable.getPath('parentRenderable.parentRenderable') !== null) {
        referenceRenderable = referenceRenderable.get('parentRenderable');
      }
      return referenceRenderable;
    },
    findEnclosingCompositeRenderableWhichIsNotOnTopLevel: function() {
      var referenceRenderable;
      referenceRenderable = this;
      while (!referenceRenderable.getPath('typeDefinition.formBuilder._isCompositeRenderable')) {
        if (referenceRenderable.getPath('typeDefinition.formBuilder._isTopLevel')) {
          return null;
        }
        referenceRenderable = referenceRenderable.get('parentRenderable');
      }
      if (referenceRenderable.getPath('typeDefinition.formBuilder._isTopLevel')) {
        return null;
      }
      return referenceRenderable;
    },
    removeWithConfirmationDialog: function() {
      var thisRenderable;
      thisRenderable = this;
      return $('<div>Are you sure that you want to remove this Element?</div>').dialog({
        dialogClass: 'neos-form-yamlbuilder-dialog',
        title: 'Remove Element?',
        modal: true,
        resizable: false,
        buttons: {
          'Delete': function() {
            thisRenderable.remove();
            return $(this).dialog('close');
          },
          'Cancel': function() {
            return $(this).dialog('close');
          }
        }
      });
    },
    remove: function(updateCurrentRenderable) {
      if (updateCurrentRenderable == null) {
        updateCurrentRenderable = true;
      }
      if (updateCurrentRenderable) {
        Neos.Form.YamlBuilder.Model.Form.set('currentlySelectedRenderable', this.get('parentRenderable'));
      }
      return this.getPath('parentRenderable.renderables').removeObject(this);
    }
  });

  Neos.Form.YamlBuilder.Model.Renderable.reopenClass({
    create: function(obj) {
      var childRenderable, childRenderables, k, len2, m, renderable, v;
      childRenderables = obj.renderables;
      delete obj.renderables;
      renderable = Ember.Object.create.call(Neos.Form.YamlBuilder.Model.Renderable, obj);
      for (k in obj) {
        v = obj[k];
        renderable.addObserver(k, renderable, 'somePropertyChanged');
      }
      if (childRenderables) {
        for (m = 0, len2 = childRenderables.length; m < len2; m++) {
          childRenderable = childRenderables[m];
          renderable.get('renderables').pushObject(Neos.Form.YamlBuilder.Model.Renderable.create(childRenderable));
        }
      }
      return renderable;
    }
  });

  Neos.Form.YamlBuilder.Model.FormElementType = Ember.Object.extend({
    type: null,
    __cssClassNames: (function() {
      return "neos-form-yamlbuilder-group-" + (this.getPath('formBuilder.group')) + " neos-form-yamlbuilder-type-" + (this.get('type').toLowerCase().replace(/[^a-z0-9]/g, '-'));
    }).property('formBuilder.group', 'type').cacheable()
  });

  Neos.Form.YamlBuilder.Model.FormElementTypes = Ember.Object.create({
    allTypeNames: [],
    init: function() {
      var ref6, ref7, results, typeConfiguration, typeName;
      if (((ref6 = Neos.Form.YamlBuilder.Configuration) != null ? ref6.formElementTypes : void 0) == null) {
        return;
      }
      ref7 = Neos.Form.YamlBuilder.Configuration.formElementTypes;
      results = [];
      for (typeName in ref7) {
        typeConfiguration = ref7[typeName];
        typeConfiguration.type = typeName;
        this.allTypeNames.push(typeName);
        results.push(this.set(typeName, Neos.Form.YamlBuilder.Model.FormElementType.create(typeConfiguration)));
      }
      return results;
    }
  });

  Neos.Form.YamlBuilder.Model.FormElementGroups = Ember.Object.create({
    allGroupNames: [],
    init: function() {
      var groupConfiguration, groupName, ref6, ref7, results;
      if (((ref6 = Neos.Form.YamlBuilder.Configuration) != null ? ref6.formElementGroups : void 0) == null) {
        return;
      }
      ref7 = Neos.Form.YamlBuilder.Configuration.formElementGroups;
      results = [];
      for (groupName in ref7) {
        groupConfiguration = ref7[groupName];
        this.allGroupNames.push(groupName);
        results.push(this.set(groupName, Ember.Object.create(groupConfiguration)));
      }
      return results;
    }
  });

  Neos.Form.YamlBuilder.View = {};

  Neos.Form.YamlBuilder.View.ContainerView = Ember.ContainerView.extend({
    instanciatedViews: null,
    onInstanciatedViewsChange: (function() {
      var len2, m, ref6, results, view;
      this.removeAllChildren();
      ref6 = this.get('instanciatedViews');
      results = [];
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        view = ref6[m];
        results.push(this.get('childViews').pushObject(view));
      }
      return results;
    }).observes('instanciatedViews')
  });

  Neos.Form.YamlBuilder.View.Select = Ember.Select.extend({
    attributeBindings: ['disabled']
  });

  Neos.Form.YamlBuilder.View.TextField = Ember.TextField.extend({
    validatorName: null,
    _lastValidValue: false,
    validate: function(v) {
      var validator;
      if (this.get('validatorName')) {
        validator = Ember.getPath(this.get('validatorName'));
        return validator.call(this, v);
      }
      return true;
    },
    validatedValue: (function(k, v) {
      if (arguments.length >= 2) {
        if (this.validate(v)) {
          this._lastValidValue = v;
        }
        return this._lastValidValue;
      } else {
        return this._lastValidValue;
      }
    }).property().cacheable(),
    valueBinding: 'validatedValue'
  });

  Neos.Form.YamlBuilder.View.Application = Ember.View.extend({
    templateName: 'Application',
    didInsertElement: function() {
      return this.addLayout();
    },
    addLayout: function() {
      $('body').layout({
        defaults: {
          minSize: 100,
          spacing_open: 3,
          closable: false,
          slidable: false,
          resizable: true,
          useStateCookie: false
        },
        north: {
          paneSelector: '#neos-form-yamlbuilder-header',
          resizable: false,
          spacing_open: 0,
          size: 46,
          minSize: 0
        },
        east: {
          paneSelector: '#neos-form-yamlbuilder-elementOptionsPanel',
          size: 290,
          minSize: 200,
          maxSize: 350
        },
        south: {
          paneSelector: '#neos-form-yamlbuilder-footer',
          resizable: false,
          spacing_open: 0,
          size: 20,
          minSize: 0
        },
        west: {
          paneSelector: '#neos-form-yamlbuilder-elementSidebar',
          size: 240,
          minSize: 200,
          maxSize: 350
        },
        center: {
          paneSelector: '#neos-form-yamlbuilder-stage'
        }
      });
      return $('#neos-form-yamlbuilder-elementSidebar').layout({
        defaults: {
          minSize: 100,
          closable: false,
          slidable: false,
          resizable: true,
          spacing_open: 5,
          useStateCookie: true
        },
        north: {
          minSize: 100,
          size: 300,
          paneSelector: '#neos-form-yamlbuilder-structurePanel'
        },
        center: {
          paneSelector: '#neos-form-yamlbuilder-insertElementsPanel'
        }
      });
    },
    updatePageTitle: (function() {
      return document.title = 'Form Builder - ' + Ember.getPath('Neos.Form.YamlBuilder.Model.Form.formDefinition.label');
    }).observes('Neos.Form.YamlBuilder.Model.Form.formDefinition.label')
  });

  Neos.Form.YamlBuilder.View.Header = Ember.View.extend({
    templateName: 'Header'
  });

  Neos.Form.YamlBuilder.View.Header.PresetSelector = Ember.Select.extend({
    contentBinding: 'Neos.Form.YamlBuilder.Configuration.availablePresets',
    optionLabelPath: 'content.title',
    init: function() {
      this.resetSelection();
      return this._super.apply(this, arguments);
    },
    reloadIfPresetChanged: (function() {
      var that;
      if (this.getPath('selection.name') === Neos.Form.YamlBuilder.Configuration.presetName) {
        return;
      }
      if (Neos.Form.YamlBuilder.Model.Form.get('unsavedContent')) {
        that = this;
        return $('<div>There are unsaved changes, but you need to save before changing the preset. Do you want to save now?</div>').dialog({
          dialogClass: 'neos-form-yamlbuilder-dialog',
          title: 'Save changes?',
          modal: true,
          resizable: false,
          buttons: {
            'Save and redirect': function() {
              that.saveAndRedirect();
              return $(this).dialog('close');
            },
            'Cancel': function() {
              that.resetSelection();
              return $(this).dialog('close');
            }
          }
        });
      } else {
        return this.redirect();
      }
    }).observes('selection'),
    resetSelection: (function() {
      var len2, m, ref6, results, val;
      if (!this.get('content')) {
        return;
      }
      ref6 = this.get('content');
      results = [];
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        val = ref6[m];
        if (val.name === Neos.Form.YamlBuilder.Configuration.presetName) {
          this.set('selection', val);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    }).observes('content'),
    saveAndRedirect: function() {
      return Neos.Form.YamlBuilder.Model.Form.save((function(_this) {
        return function(success) {
          if (success) {
            return _this.redirect();
          }
        };
      })(this));
    },
    redirect: function() {
      return window.location.href = Neos.Form.YamlBuilder.Utility.getUri(Neos.Form.YamlBuilder.Configuration.endpoints.editForm, this.getPath('selection.name'));
    }
  });

  Neos.Form.YamlBuilder.View.Header.PreviewButton = Ember.Button.extend({
    targetObject: (function() {
      return this;
    }).property().cacheable(),
    action: function() {
      return this.preview();
    },
    preview: function() {
      var windowIdentifier;
      windowIdentifier = 'preview_' + Neos.Form.YamlBuilder.Model.Form.getPath('formDefinition.identifier');
      return window.open('/' + Neos.Form.YamlBuilder.Utility.getUri(Neos.Form.YamlBuilder.Configuration.endpoints.previewForm), windowIdentifier);
    }
  });

  Neos.Form.YamlBuilder.View.Header.SaveButton = Ember.Button.extend({
    targetObject: (function() {
      return this;
    }).property().cacheable(),
    action: function() {
      return this.save();
    },
    classNames: ['neos-form-yamlbuilder-savebutton'],
    classNameBindings: ['isActive', 'currentStatus'],
    currentStatusBinding: 'Neos.Form.YamlBuilder.Model.Form.saveStatus',
    disabled: (function() {
      return !Ember.getPath('Neos.Form.YamlBuilder.Model.Form.unsavedContent');
    }).property('Neos.Form.YamlBuilder.Model.Form.unsavedContent').cacheable(),
    save: function() {
      return Neos.Form.YamlBuilder.Model.Form.save();
    }
  });

  Neos.Form.YamlBuilder.View.Stage = Ember.View.extend({
    formPagesBinding: 'Neos.Form.YamlBuilder.Model.Form.formDefinition.renderables',
    currentPageIndex: (function() {
      var currentlySelectedRenderable, enclosingPage;
      currentlySelectedRenderable = Neos.Form.YamlBuilder.Model.Form.get('currentlySelectedRenderable');
      if (!currentlySelectedRenderable) {
        return 0;
      }
      enclosingPage = currentlySelectedRenderable.findEnclosingPage();
      if (!enclosingPage) {
        return 0;
      }
      if (!enclosingPage.getPath('parentRenderable.renderables')) {
        return 0;
      }
      return enclosingPage.getPath('parentRenderable.renderables').indexOf(enclosingPage);
    }).property('Neos.Form.YamlBuilder.Model.Form.currentlySelectedRenderable').cacheable(),
    page: Ember.computed(function() {
      var ref6;
      return (ref6 = this.get('formPages')) != null ? ref6.get(this.get('currentPageIndex')) : void 0;
    }).property('formPages', 'currentPageIndex').cacheable(),
    currentAjaxRequest: null,
    isLoadingBinding: 'Neos.Form.YamlBuilder.Model.Form.currentlyLoadingPreview',
    renderPageIfPageObjectChanges: (function() {
      if (!Neos.Form.YamlBuilder.Model.Form.getPath('formDefinition.identifier')) {
        return;
      }
      if (this.currentAjaxRequest) {
        this.currentAjaxRequest.abort();
      }
      if (this.timeout) {
        window.clearTimeout(this.timeout);
      }
      return this.timeout = window.setTimeout((function(_this) {
        return function() {
          var formDefinition;
          formDefinition = Neos.Form.YamlBuilder.Utility.convertToSimpleObject(Neos.Form.YamlBuilder.Model.Form.get('formDefinition'));
          _this.set('isLoading', true);
          return _this.currentAjaxRequest = $.post(Neos.Form.YamlBuilder.Configuration.endpoints.formPageRenderer, {
            formDefinition: formDefinition,
            currentPageIndex: _this.get('currentPageIndex'),
            presetName: Neos.Form.YamlBuilder.Configuration.presetName,
            __csrfToken: Neos.Form.YamlBuilder.Configuration.csrfToken
          }, function(data, textStatus, jqXHR) {
            if (_this.currentAjaxRequest !== jqXHR) {
              return;
            }
            _this.$().html(data);
            _this.set('isLoading', false);
            return _this.postProcessRenderedPage();
          });
        };
      })(this), 300);
    }).observes('page', 'page.__nestedPropertyChange'),
    postProcessRenderedPage: function() {
      this.onCurrentElementChanges();
      this.$().find('[data-element]').on('click dblclick select focus keydown keypress keyup mousedown mouseup', function(e) {
        return e.preventDefault();
      });
      this.$().find('form').submit(function(e) {
        return e.preventDefault();
      });
      return this.$().find('[data-element]').parent().addClass('neos-form-sortable').sortable({
        revert: 'true',
        start: (function(_this) {
          return function(e, o) {
            if (_this.currentAjaxRequest) {
              _this.currentAjaxRequest.abort();
            }
            if (_this.timeout) {
              window.clearTimeout(_this.timeout);
            }
            return _this.set('isLoading', false);
          };
        })(this),
        update: (function(_this) {
          return function(e, o) {
            var movedRenderable, nextElement, nextElementPath, pathOfMovedElement, previousElement, previousElementPath, referenceElementIndex;
            pathOfMovedElement = $(o.item.context).attr('data-element');
            movedRenderable = _this.findRenderableForPath(pathOfMovedElement);
            movedRenderable.getPath('parentRenderable.renderables').removeObject(movedRenderable);
            nextElementPath = $(o.item.context).nextAll('[data-element]').first().attr('data-element');
            if (nextElementPath) {
              nextElement = _this.findRenderableForPath(nextElementPath);
            }
            previousElementPath = $(o.item.context).prevAll('[data-element]').first().attr('data-element');
            if (previousElementPath) {
              previousElement = _this.findRenderableForPath(previousElementPath);
            }
            if (nextElement) {
              referenceElementIndex = nextElement.getPath('parentRenderable.renderables').indexOf(nextElement);
              return nextElement.getPath('parentRenderable.renderables').insertAt(referenceElementIndex, movedRenderable);
            } else if (previousElement) {
              referenceElementIndex = previousElement.getPath('parentRenderable.renderables').indexOf(previousElement);
              return previousElement.getPath('parentRenderable.renderables').insertAt(referenceElementIndex + 1, movedRenderable);
            } else {
              throw 'Next Element or Previous Element need to be set. Should not happen...';
            }
          };
        })(this)
      });
    },
    onCurrentElementChanges: (function() {
      var identifierPath, renderable;
      renderable = Neos.Form.YamlBuilder.Model.Form.get('currentlySelectedRenderable');
      if (!renderable) {
        return;
      }
      this.$().find('.neos-form-yamlbuilder-form-element-selected').removeClass('neos-form-yamlbuilder-form-element-selected');
      identifierPath = renderable.identifier;
      while (renderable = renderable.parentRenderable) {
        identifierPath = renderable.identifier + '/' + identifierPath;
      }
      return this.$().find('[data-element="' + identifierPath + '"]').addClass('neos-form-yamlbuilder-form-element-selected');
    }).observes('Neos.Form.YamlBuilder.Model.Form.currentlySelectedRenderable'),
    click: function(e) {
      var pathToClickedElement;
      pathToClickedElement = $(e.target).closest('[data-element]').attr('data-element');
      if (!pathToClickedElement) {
        return;
      }
      return Neos.Form.YamlBuilder.Model.Form.set('currentlySelectedRenderable', this.findRenderableForPath(pathToClickedElement));
    },
    findRenderableForPath: function(path) {
      var currentRenderable, expandedPathToClickedElement, len2, len3, m, p, pathPart, ref6, renderable;
      expandedPathToClickedElement = path.split('/');
      expandedPathToClickedElement.shift();
      expandedPathToClickedElement.shift();
      currentRenderable = this.get('page');
      for (m = 0, len2 = expandedPathToClickedElement.length; m < len2; m++) {
        pathPart = expandedPathToClickedElement[m];
        ref6 = currentRenderable.get('renderables');
        for (p = 0, len3 = ref6.length; p < len3; p++) {
          renderable = ref6[p];
          if (renderable.identifier === pathPart) {
            currentRenderable = renderable;
            break;
          }
        }
      }
      return currentRenderable;
    }
  });

  Neos.Form.YamlBuilder.View.StructurePanel = Ember.View.extend({
    formDefinitionBinding: 'Neos.Form.YamlBuilder.Model.Form.formDefinition',
    templateName: 'StructurePanel',
    _tree: null,
    didInsertElement: function() {
      this._tree = this.$().find('.tree');
      this._tree.dynatree({
        onActivate: function(node) {
          return Neos.Form.YamlBuilder.Model.Form.set('currentlySelectedRenderable', node.data.formRenderable);
        },
        dnd: {
          onDragStart: function() {
            return true;
          },
          autoExpandMS: 300,
          onDragEnter: function(targetNode, sourceNode) {
            var targetNodeIsCompositeRenderable;
            targetNodeIsCompositeRenderable = targetNode.data.formRenderable.getPath('typeDefinition.formBuilder._isCompositeRenderable');
            if (sourceNode.getLevel() === 1) {
              if (targetNode.getLevel() === 1) {
                return ['before', 'after'];
              } else {
                return false;
              }
            } else {
              if (targetNode.getLevel() === 1) {
                if (targetNode.data.formRenderable.getPath('typeDefinition.formBuilder._isCompositeRenderable')) {
                  return ['over'];
                } else {
                  return false;
                }
              } else {
                if (targetNodeIsCompositeRenderable) {
                  return ['before', 'over', 'after'];
                } else {
                  return ['before', 'after'];
                }
              }
            }
          },
          onDrop: function(targetNode, sourceNode, hitMode) {
            var indexOfTargetRenderable, sourceRenderable, targetRenderable;
            sourceRenderable = sourceNode.data.formRenderable;
            targetRenderable = targetNode.data.formRenderable;
            sourceRenderable.getPath('parentRenderable.renderables').removeObject(sourceRenderable);
            if (hitMode === 'over') {
              targetRenderable.get('renderables').pushObject(sourceRenderable);
            } else {
              indexOfTargetRenderable = targetRenderable.getPath('parentRenderable.renderables').indexOf(targetRenderable);
              if (hitMode === 'before') {
                targetRenderable.getPath('parentRenderable.renderables').insertAt(indexOfTargetRenderable, sourceRenderable);
              } else {
                targetRenderable.getPath('parentRenderable.renderables').insertAt(indexOfTargetRenderable + 1, sourceRenderable);
              }
            }
            Neos.Form.YamlBuilder.Model.Form.set('currentlySelectedRenderable', null);
            return Neos.Form.YamlBuilder.Model.Form.set('currentlySelectedRenderable', sourceRenderable);
          }
        }
      });
      return this.updateTreeStateFromModel(this._tree.dynatree('getRoot'), this.getPath('formDefinition.renderables'));
    },
    updateTree: (function() {
      var activeNodePath, base, base1, expandedNodePath, expandedNodePaths, len2, m, ref6, ref7, ref8;
      if (!((ref6 = this._tree) != null ? ref6.dynatree('getTree').visit : void 0)) {
        return;
      }
      expandedNodePaths = [];
      this._tree.dynatree('getTree').visit(function(node) {
        if (node.isExpanded()) {
          return expandedNodePaths.push(node.data.key);
        }
      });
      if (typeof (base = this._tree.dynatree('getRoot')).removeChildren === "function") {
        base.removeChildren();
      }
      this.updateTreeStateFromModel(this._tree.dynatree('getRoot'), this.getPath('formDefinition.renderables'), expandedNodePaths.length === 0);
      for (m = 0, len2 = expandedNodePaths.length; m < len2; m++) {
        expandedNodePath = expandedNodePaths[m];
        if ((ref7 = this._tree.dynatree('getTree').getNodeByKey(expandedNodePath)) != null) {
          ref7.expand(true);
        }
      }
      activeNodePath = Neos.Form.YamlBuilder.Model.Form.getPath('currentlySelectedRenderable._path');
      return typeof (base1 = this._tree.dynatree('getTree')).getNodeByKey === "function" ? (ref8 = base1.getNodeByKey(activeNodePath)) != null ? ref8.activate(true) : void 0 : void 0;
    }).observes('formDefinition.__nestedPropertyChange'),
    updateTreeStateFromModel: function(dynaTreeParentNode, currentListOfSubRenderables, expandFirstNode) {
      var i, len2, m, newNode, nodeOptions, results, subRenderable;
      if (expandFirstNode == null) {
        expandFirstNode = false;
      }
      if (!currentListOfSubRenderables) {
        return;
      }
      results = [];
      for (i = m = 0, len2 = currentListOfSubRenderables.length; m < len2; i = ++m) {
        subRenderable = currentListOfSubRenderables[i];
        nodeOptions = {
          key: subRenderable.get('_path'),
          title: (subRenderable.label ? subRenderable.label : subRenderable.identifier) + " <em>(" + (subRenderable.getPath('typeDefinition.formBuilder.label')) + ")</em>",
          formRenderable: subRenderable,
          addClass: subRenderable.getPath('typeDefinition.__cssClassNames')
        };
        if (expandFirstNode && i === 0) {
          nodeOptions.expand = true;
        }
        newNode = dynaTreeParentNode.addChild(nodeOptions);
        results.push(this.updateTreeStateFromModel(newNode, subRenderable.getPath('renderables')));
      }
      return results;
    },
    updateCurrentlySelectedNode: (function() {
      return this.updateTree();
    }).observes('Neos.Form.YamlBuilder.Model.Form.currentlySelectedRenderable'),
    showFormOptions: function() {
      return Neos.Form.YamlBuilder.Model.Form.set('currentlySelectedRenderable', Neos.Form.YamlBuilder.Model.Form.get('formDefinition'));
    }
  });

  Neos.Form.YamlBuilder.View.StructurePanel.FormButton = Ember.Button.extend({
    target: 'parentView',
    action: 'showFormOptions',
    classNameBindings: ['isFormDefinitionCurrentlySelected:neos-form-yamlbuilder-form-selected'],
    isFormDefinitionCurrentlySelected: (function() {
      return Ember.getPath('Neos.Form.YamlBuilder.Model.Form.currentlySelectedRenderable') === Ember.getPath('Neos.Form.YamlBuilder.Model.Form.formDefinition');
    }).property('Neos.Form.YamlBuilder.Model.Form.formDefinition', 'Neos.Form.YamlBuilder.Model.Form.currentlySelectedRenderable').cacheable()
  });

  Neos.Form.YamlBuilder.View.InsertElementsPanel = Ember.View.extend({
    templateName: 'InsertElementsPanel',
    allFormElementTypesBinding: 'Neos.Form.YamlBuilder.Model.FormElementTypes.allTypeNames',
    formElementsGrouped: (function() {
      var formElementType, formElementTypeName, formElementsByGroup, formGroup, formGroupName, formGroups, len2, len3, m, p, ref6, ref7, ref8, ref9;
      formElementsByGroup = {};
      ref6 = this.get('allFormElementTypes');
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        formElementTypeName = ref6[m];
        formElementType = Neos.Form.YamlBuilder.Model.FormElementTypes.get(formElementTypeName);
        if (((ref7 = formElementType.formBuilder) != null ? ref7.group : void 0) == null) {
          continue;
        }
        if (!formElementsByGroup[formElementType.formBuilder.group]) {
          formElementsByGroup[formElementType.formBuilder.group] = [];
        }
        formElementType.set('key', formElementTypeName);
        formElementsByGroup[formElementType.formBuilder.group].push(formElementType);
      }
      formGroups = [];
      ref8 = Neos.Form.YamlBuilder.Model.FormElementGroups.get('allGroupNames');
      for (p = 0, len3 = ref8.length; p < len3; p++) {
        formGroupName = ref8[p];
        formGroup = Neos.Form.YamlBuilder.Model.FormElementGroups.get(formGroupName);
        formGroup.set('key', formGroupName);
        if ((ref9 = formElementsByGroup[formGroupName]) != null) {
          ref9.sort(function(a, b) {
            return a.formBuilder.sorting - b.formBuilder.sorting;
          });
        }
        formGroup.set('elements', formElementsByGroup[formGroupName]);
        formGroups.push(formGroup);
      }
      formGroups.sort(function(a, b) {
        return a.sorting - b.sorting;
      });
      return formGroups;
    }).property('allFormElementTypes').cacheable()
  });

  Neos.Form.YamlBuilder.View.InsertElementsPanel.ElementsCollection = Ember.CollectionView.extend({
    itemViewClass: 'Neos.Form.YamlBuilder.View.InsertElementsPanel.Element'
  });

  Neos.Form.YamlBuilder.View.InsertElementsPanel.Element = Ember.View.extend({
    currentlySelectedElementBinding: 'Neos.Form.YamlBuilder.Model.Form.currentlySelectedRenderable',
    content: null,
    formElementTypeBinding: 'content',
    didInsertElement: function() {
      this.$().html('<span>' + this.getPath('formElementType.formBuilder.label') + '</span>');
      this.$().attr('title', this.getPath('formElementType.key'));
      return this.$().addClass(this.getPath('formElementType.__cssClassNames'));
    },
    classNameBindings: ['enabled:neos-form-yamlbuilder-enabled'],
    enabled: (function() {
      var currentlySelectedRenderable;
      if (this.getPath('formElementType.formBuilder._isTopLevel')) {
        return true;
      }
      currentlySelectedRenderable = this.get('currentlySelectedElement');
      if (!currentlySelectedRenderable) {
        return false;
      }
      if (currentlySelectedRenderable.getPath('typeDefinition.formBuilder._isTopLevel') && !currentlySelectedRenderable.getPath('typeDefinition.formBuilder._isCompositeRenderable')) {
        return false;
      }
      return true;
    }).property('formElementType', 'currentlySelectedElement').cacheable(),
    getNextFreeIdentifier: function() {
      var i, isIdentifierUsed, prefix, type;
      type = this.getPath('formElementType.key');
      prefix = type.split(':')[1];
      prefix = prefix.toLowerCase();
      isIdentifierUsed = function(identifier) {
        var checkIdentifier, identifierFound;
        identifierFound = false;
        checkIdentifier = function(renderable) {
          var childRenderable, len2, m, ref6, results;
          if (renderable.get('identifier') === identifier) {
            identifierFound = true;
          }
          if (!identifierFound) {
            ref6 = renderable.get('renderables');
            results = [];
            for (m = 0, len2 = ref6.length; m < len2; m++) {
              childRenderable = ref6[m];
              results.push(checkIdentifier(childRenderable));
            }
            return results;
          }
        };
        checkIdentifier(Neos.Form.YamlBuilder.Model.Form.get('formDefinition'));
        return identifierFound;
      };
      i = 1;
      while (isIdentifierUsed(prefix + i)) {
        i++;
      }
      return prefix + i;
    },
    click: function() {
      var currentlySelectedRenderable, defaultValues, identifier, indexInParent, newRenderable, parentRenderablesArray, referenceRenderable;
      currentlySelectedRenderable = this.get('currentlySelectedElement');
      if (!currentlySelectedRenderable) {
        return;
      }
      if (!this.get('enabled')) {
        return;
      }
      defaultValues = this.getPath('formElementType.formBuilder.predefinedDefaults') || {};
      identifier = this.getNextFreeIdentifier();
      newRenderable = Neos.Form.YamlBuilder.Model.Renderable.create($.extend({
        type: this.getPath('formElementType.key'),
        identifier: identifier,
        label: identifier
      }, defaultValues));
      if (!this.getPath('formElementType.formBuilder._isTopLevel') && currentlySelectedRenderable.getPath('typeDefinition.formBuilder._isCompositeRenderable')) {
        currentlySelectedRenderable.get('renderables').pushObject(newRenderable);
      } else {
        referenceRenderable = currentlySelectedRenderable;
        if (referenceRenderable === Neos.Form.YamlBuilder.Model.Form.get('formDefinition')) {
          referenceRenderable = referenceRenderable.getPath('renderables.0');
        } else if (this.getPath('formElementType.formBuilder._isTopLevel') && !currentlySelectedRenderable.getPath('typeDefinition.formBuilder._isTopLevel')) {
          referenceRenderable = referenceRenderable.findEnclosingPage();
        } else if (this.getPath('formElementType.formBuilder._isCompositeRenderable')) {
          if (referenceRenderable.findEnclosingCompositeRenderableWhichIsNotOnTopLevel()) {
            referenceRenderable = referenceRenderable.findEnclosingCompositeRenderableWhichIsNotOnTopLevel();
          }
        }
        parentRenderablesArray = referenceRenderable.getPath('parentRenderable.renderables');
        indexInParent = parentRenderablesArray.indexOf(referenceRenderable);
        parentRenderablesArray.replace(indexInParent + 1, 0, [newRenderable]);
      }
      return window.setTimeout((function(_this) {
        return function() {
          return _this.set('currentlySelectedElement', newRenderable);
        };
      })(this), 10);
    }
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel = Ember.ContainerView.extend({
    formElement: null,
    orderedFormFieldEditors: (function() {
      var formFieldEditors, k, orderedFormFieldEditors, v;
      formFieldEditors = $.extend({}, this.getPath('formElement.typeDefinition.formBuilder.editors'));
      orderedFormFieldEditors = [];
      for (k in formFieldEditors) {
        v = formFieldEditors[k];
        if (!v) {
          continue;
        }
        v['key'] = k;
        orderedFormFieldEditors.push(v);
      }
      orderedFormFieldEditors.sort(function(a, b) {
        return a.sorting - b.sorting;
      });
      return orderedFormFieldEditors;
    }).property('formElement.typeDefinition').cacheable(),
    onFormElementChange: (function() {
      var formFieldEditor, len2, m, ref6, results, subView, subViewClass, subViewOptions;
      this.removeAllChildren();
      if (!this.formElement) {
        return;
      }
      ref6 = this.get('orderedFormFieldEditors');
      results = [];
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        formFieldEditor = ref6[m];
        subViewClass = Ember.getPath(formFieldEditor.viewName);
        if (!subViewClass) {
          throw "Editor class '" + formFieldEditor.viewName + "' not found";
        }
        subViewOptions = $.extend({}, formFieldEditor, {
          formElement: this.formElement
        });
        subView = subViewClass.create(subViewOptions);
        results.push(this.get('childViews').pushObject(subView));
      }
      return results;
    }).observes('formElement')
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor = {};

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractEditor = Ember.View.extend({
    classNames: ['form-editor'],
    formElement: null
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractEditor.extend({
    propertyPath: null,
    defaultValue: '',
    valueChanged: function() {
      var base;
      return typeof (base = this.get('formElement')).somePropertyChanged === "function" ? base.somePropertyChanged(this.formElement, this.get('propertyPath')) : void 0;
    },
    value: (function(k, v) {
      var value;
      if (v !== void 0) {
        this.formElement.setPath(this.get('propertyPath'), v);
        return v;
      } else {
        value = this.formElement.getPath(this.get('propertyPath'));
        if (value === void 0) {
          this.formElement.setPathRecursively(this.get('propertyPath'), this.get('defaultValue'));
          value = this.formElement.getPath(this.get('propertyPath'));
        }
        return value;
      }
    }).property('propertyPath', 'formElement').cacheable()
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractCollectionEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor.extend({
    availableCollectionElements: null,
    defaultValue: (function() {
      return [];
    }).property().cacheable(),
    isVisible: (function() {
      var collectionEditorViewsFound, collectionElementsAvailable;
      collectionElementsAvailable = !this.get('noCollectionElementsAvailable');
      collectionEditorViewsFound = this.get('collectionEditorViews').length > 0;
      return collectionElementsAvailable || collectionEditorViewsFound;
    }).property('collectionEditorViews', 'noCollectionElementsAvailable').cacheable(),
    collectionEditorViews: null,
    prompt: Ember.required(),
    init: function() {
      this._super();
      this.set('collectionEditorViews', []);
      return this.updateCollectionEditorViews();
    },
    sortedAvailableCollectionElements: (function() {
      var collectionElementTemplate, identifier, ref6, sortedCollectionElements;
      sortedCollectionElements = [];
      ref6 = this.get('availableCollectionElements');
      for (identifier in ref6) {
        collectionElementTemplate = ref6[identifier];
        if (this.isCollectionElementTemplateFoundInCollection(identifier)) {
          continue;
        }
        sortedCollectionElements.push($.extend({
          identifier: identifier
        }, collectionElementTemplate));
      }
      sortedCollectionElements.sort(function(a, b) {
        return a.sorting - b.sorting;
      });
      return sortedCollectionElements;
    }).property('availableCollectionElements', 'formElement.__nestedPropertyChange').cacheable(),
    noCollectionElementsAvailable: (function() {
      return this.get('sortedAvailableCollectionElements').length === 0;
    }).property('sortedAvailableCollectionElements').cacheable(),
    addCollectionElementSelection: null,
    addCollectionElement: (function() {
      var collectionElementToBeAdded;
      collectionElementToBeAdded = this.get('addCollectionElementSelection');
      if (!collectionElementToBeAdded) {
        return;
      }
      this.get('value').push({
        identifier: collectionElementToBeAdded.identifier,
        options: collectionElementToBeAdded.options || {}
      });
      this.updateCollectionEditorViews();
      this.valueChanged();
      if (jQuery.browser.msie) {
        window.setTimeout((function(_this) {
          return function() {
            var viewId;
            viewId = _this.$().find('.neos-form-yamlbuilder-addFinisher select, .neos-form-yamlbuilder-addValidator select').attr('id');
            return Ember.View.views[viewId].rerender();
          };
        })(this), 100);
      }
      return this.set('addCollectionElementSelection', null);
    }).observes('addCollectionElementSelection'),
    updateCollectionEditorViews: (function() {
      var availableCollectionElements, collection, collectionEditorViews, collectionElement, collectionElementEditor, collectionElementEditorOptions, collectionElementTemplate, i, len2, m;
      this.addRequiredCollectionElementsIfNeeded();
      collection = this.get('value');
      availableCollectionElements = this.get('availableCollectionElements');
      if (!availableCollectionElements) {
        return;
      }
      collectionEditorViews = [];
      for (i = m = 0, len2 = collection.length; m < len2; i = ++m) {
        collectionElement = collection[i];
        collectionElementTemplate = availableCollectionElements[collectionElement.identifier];
        if (!collectionElementTemplate) {
          continue;
        }
        collectionElementEditor = Ember.getPath(collectionElementTemplate.viewName || 'Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.DefaultValidatorEditor');
        if (!collectionElementEditor) {
          throw "Collection Editor class '" + collectionElementTemplate.viewName + "' not found";
        }
        collectionElementEditorOptions = $.extend({
          elementIndex: i,
          valueChanged: (function(_this) {
            return function() {
              return _this.valueChanged();
            };
          })(this),
          updateCollectionEditorViews: (function(_this) {
            return function() {
              return _this.updateCollectionEditorViews();
            };
          })(this),
          collection: this.get('value')
        }, collectionElementTemplate);
        collectionEditorViews.push(collectionElementEditor.create(collectionElementEditorOptions));
      }
      return this.set('collectionEditorViews', collectionEditorViews);
    }).observes('value', 'availableCollectionElements'),
    addRequiredCollectionElementsIfNeeded: function() {
      var availableCollectionElementTemplate, availableCollectionElements, collection, collectionElementName, identifier, len2, m, requiredAndMissingCollectionElements, results;
      collection = this.get('value');
      availableCollectionElements = this.get('availableCollectionElements');
      requiredAndMissingCollectionElements = [];
      for (identifier in availableCollectionElements) {
        availableCollectionElementTemplate = availableCollectionElements[identifier];
        if (!availableCollectionElementTemplate.required) {
          continue;
        }
        if (!this.isCollectionElementTemplateFoundInCollection(identifier)) {
          requiredAndMissingCollectionElements.push(identifier);
        }
      }
      results = [];
      for (m = 0, len2 = requiredAndMissingCollectionElements.length; m < len2; m++) {
        collectionElementName = requiredAndMissingCollectionElements[m];
        results.push(collection.push({
          identifier: collectionElementName,
          options: $.extend({}, availableCollectionElements[collectionElementName].options)
        }));
      }
      return results;
    },
    isCollectionElementTemplateFoundInCollection: function(collectionElementTemplateIdentifier) {
      var collection, collectionElement, len2, m;
      collection = this.get('value');
      for (m = 0, len2 = collection.length; m < len2; m++) {
        collectionElement = collection[m];
        if (collectionElementTemplateIdentifier === collectionElement.identifier) {
          return true;
        }
      }
      return false;
    }
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.TextOutput = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractEditor.extend({});

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.IdentifierEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor.extend({
    templateName: 'ElementOptionsPanel-IdentifierEditor',
    propertyPath: 'identifier',
    editMode: false,
    textFieldValue: null,
    validationErrorMessage: null,
    validate: function(v) {
      var elementsWithIdentifier, findFormElementsWithIdentifiers;
      if (v === '') {
        this.set('validationErrorMessage', 'You need to set an identifier!');
        return false;
      }
      if (!v.match(/^[a-z][a-zA-Z0-9-_]*$/)) {
        this.set('validationErrorMessage', 'This is no valid identifier. Only lowerCamelCase allowed.');
        return false;
      }
      elementsWithIdentifier = [];
      findFormElementsWithIdentifiers = function(el) {
        var len2, m, ref6, results, subRenderable;
        if (el.get('identifier') === v) {
          elementsWithIdentifier.push(el);
        }
        ref6 = el.get('renderables');
        results = [];
        for (m = 0, len2 = ref6.length; m < len2; m++) {
          subRenderable = ref6[m];
          results.push(findFormElementsWithIdentifiers(subRenderable));
        }
        return results;
      };
      findFormElementsWithIdentifiers(Neos.Form.YamlBuilder.Model.Form.get('formDefinition'));
      if (elementsWithIdentifier.length === 0) {
        this.set('validationErrorMessage', null);
        return true;
      } else if (elementsWithIdentifier.length === 1 && elementsWithIdentifier[0] === this.get('formElement')) {
        this.set('validationErrorMessage', null);
        return true;
      } else {
        this.set('validationErrorMessage', 'The identifier is already used');
        return false;
      }
    },
    commit: function() {
      if (this.validate(this.get('textFieldValue'))) {
        this.set('value', this.get('textFieldValue'));
        this.set('editMode', false);
        return true;
      } else {
        return false;
      }
    },
    tryToCommit: function() {
      if (!this.commit()) {
        return this.abort();
      }
    },
    abort: function() {
      return this.set('editMode', false);
    },
    click: function() {
      if (!this.get('editMode')) {
        this.set('textFieldValue', this.get('value'));
        return this.set('editMode', true);
      }
    }
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.IdentifierEditor.TextField = Ember.TextField.extend({
    insertNewline: function() {
      return this.get('parentView').commit();
    },
    cancel: function() {
      return this.get('parentView').abort();
    },
    focusOut: function() {
      return this.get('parentView').tryToCommit();
    },
    didInsertElement: function() {
      return this.$().select();
    }
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.TextEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor.extend({
    label: null,
    onValueChange: (function() {
      return this.valueChanged();
    }).observes('value'),
    templateName: 'ElementOptionsPanel-TextEditor'
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.TextareaEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.TextEditor.extend({
    templateName: 'ElementOptionsPanel-TextareaEditor'
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.SelectEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor.extend({
    templateName: 'ElementOptionsPanel-SelectEditor',
    availableElements: null,
    selectedValue: (function(k, v) {
      var element, len2, m, ref6;
      if (arguments.length >= 2) {
        this.set('value', v.value);
        this.valueChanged();
      }
      ref6 = this.get('availableElements');
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        element = ref6[m];
        if (element.value === this.get('value')) {
          return element;
        }
      }
      return null;
    }).property('availableElements', 'value').cacheable()
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.RemoveElementEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractEditor.extend({
    templateName: 'ElementOptionsPanel-RemoveElement',
    remove: function() {
      return this.get('formElement').removeWithConfirmationDialog();
    }
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.PropertyGrid = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor.extend({
    columns: null,
    isSortable: false,
    enableAddRow: false,
    enableDeleteRow: false,
    shouldShowPreselectedValueColumn: false,
    templateName: 'ElementOptionsPanel-PropertyGridEditor',
    defaultValue: (function() {
      return [];
    }).property().cacheable(),
    options: (function() {
      return {
        enableColumnReorder: false,
        autoHeight: true,
        editable: true,
        enableAddRow: this.get('enableAddRow'),
        enableCellNavigation: true,
        asyncEditorLoading: false,
        forceFitColumns: true
      };
    }).property('enableAddRow').cacheable(),
    columnDefinition: (function() {
      var column, columns, len2, m, ref6;
      columns = [];
      if (this.get('isSortable')) {
        columns.push({
          id: "#",
          name: "",
          width: 40,
          behavior: "selectAndMove",
          selectable: false,
          resizable: false,
          cssClass: "cell-reorder dnd",
          focusable: false
        });
      }
      ref6 = this.get('columns');
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        column = ref6[m];
        column = $.extend({}, column);
        column.id = column.field;
        column.editor = Ember.getPath(column.editor);
        columns.push(column);
      }
      if (this.get('shouldShowPreselectedValueColumn')) {
        columns.push({
          id: '__preselectedValues',
          field: '__isPreselected',
          name: 'Selected',
          selectable: false,
          resizable: false,
          formatter: YesNoCellFormatter,
          editor: YesNoCheckboxCellEditor
        });
      }
      if (this.get('enableDeleteRow')) {
        columns.push({
          id: '__delete',
          name: '',
          width: 16,
          selectable: false,
          resizable: false,
          focusable: false,
          cssClass: "neos-form-yamlbuilder-grid-deleteRow"
        });
      }
      return columns;
    }).property('columns', 'isSortable').cacheable(),
    tableRowModel: null,
    buildTableRowModel: (function() {
      var defaultValue, isPreselected, len2, len3, m, originalRow, p, ref6, results, tableRowModel, v;
      if (!this.get('tableRowModel')) {
        this.set('tableRowModel', []);
      }
      tableRowModel = this.get('tableRowModel');
      if (tableRowModel.get('length') > 0) {
        tableRowModel.removeAt(0, tableRowModel.get('length'));
      }
      if (this.get('shouldShowPreselectedValueColumn') === 'multiple') {
        defaultValue = this.getPath('formElement.defaultValue') || [];
      } else if (this.get('shouldShowPreselectedValueColumn') === 'single' && this.getPath('formElement.defaultValue')) {
        defaultValue = [this.getPath('formElement.defaultValue')];
      } else {
        defaultValue = [];
      }
      ref6 = this.get('value');
      results = [];
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        originalRow = ref6[m];
        isPreselected = false;
        for (p = 0, len3 = defaultValue.length; p < len3; p++) {
          v = defaultValue[p];
          if (v === originalRow._key) {
            isPreselected = true;
          }
        }
        results.push(tableRowModel.push($.extend({
          __isPreselected: isPreselected
        }, originalRow)));
      }
      return results;
    }),
    valueChanged: function() {
      var defaultValue, i, len2, len3, m, oldDefaultValue, p, ref6, rows, tableRowModelRow, tmp, v;
      rows = [];
      defaultValue = [];
      ref6 = this.get('tableRowModel');
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        tableRowModelRow = ref6[m];
        if (tableRowModelRow.__isPreselected) {
          defaultValue.push(tableRowModelRow._key);
        }
        tmp = $.extend({}, tableRowModelRow);
        delete tmp.__isPreselected;
        rows.push(tmp);
      }
      if (this.get('shouldShowPreselectedValueColumn') === 'multiple') {
        this.setPath('formElement.defaultValue', defaultValue);
        this.set('value', rows);
      } else if (this.get('shouldShowPreselectedValueColumn') === 'single') {
        this.set('value', rows);
        if (defaultValue.length === 0) {
          this.setPath('formElement.defaultValue', null);
        } else {
          oldDefaultValue = this.getPath('formElement.defaultValue');
          for (i = p = 0, len3 = defaultValue.length; p < len3; i = ++p) {
            v = defaultValue[i];
            if (v !== oldDefaultValue) {
              this.setPath('formElement.defaultValue', v);
            }
          }
        }
        this.buildTableRowModel();
        this.grid.invalidateAllRows();
        this.grid.render();
      } else {
        this.set('value', rows);
      }
      return this._super();
    },
    grid: null,
    init: function() {
      this.classNames.push('PropertyGrid');
      return this._super();
    },
    didInsertElement: function() {
      var moveRowsPlugin;
      this.buildTableRowModel();
      this.grid = new Slick.Grid(this.$().find('.neos-form-yamlbuilder-grid'), this.get('tableRowModel'), this.get('columnDefinition'), this.get('options'));
      this.$().find('.slick-viewport').css('overflow-x', 'hidden');
      this.$().find('.slick-viewport').css('overflow-y', 'hidden');
      this.grid.setSelectionModel(new Slick.RowSelectionModel());
      this.grid.onDragInit.subscribe((function(_this) {
        return function() {
          return _this.grid.getEditorLock().commitCurrentEdit();
        };
      })(this));
      this.grid.onCellChange.subscribe((function(_this) {
        return function(e, args) {
          _this.get('tableRowModel').replace(args.row, 1, args.item);
          return _this.valueChanged();
        };
      })(this));
      this.grid.onAddNewRow.subscribe((function(_this) {
        return function(e, args) {
          var columnDefinition, len2, m, newItem, ref6;
          _this.grid.invalidateRow(_this.get('tableRowModel').length);
          newItem = {};
          ref6 = _this.columns;
          for (m = 0, len2 = ref6.length; m < len2; m++) {
            columnDefinition = ref6[m];
            newItem[columnDefinition.field] = '';
          }
          $.extend(newItem, args.item);
          _this.get('tableRowModel').pushObject(newItem);
          _this.grid.updateRowCount();
          _this.grid.render();
          return _this.valueChanged();
        };
      })(this));
      moveRowsPlugin = new Slick.RowMoveManager();
      this.grid.registerPlugin(moveRowsPlugin);
      moveRowsPlugin.onBeforeMoveRows.subscribe(function(e, data) {
        var i, m, ref6;
        for (i = m = 0, ref6 = data.rows.length; 0 <= ref6 ? m < ref6 : m > ref6; i = 0 <= ref6 ? ++m : --m) {
          if (data.rows[i] === data.insertBefore || data.rows[i] === data.insertBefore - 1) {
            e.stopPropagation();
            return false;
          }
        }
        return true;
      });
      moveRowsPlugin.onMoveRows.subscribe((function(_this) {
        return function(e, args) {
          var arrayRowToBeMoved, movedRowIndex;
          movedRowIndex = args.rows[0];
          arrayRowToBeMoved = _this.get('tableRowModel').objectAt(movedRowIndex);
          _this.get('tableRowModel').removeAt(movedRowIndex, 1);
          if (movedRowIndex < args.insertBefore) {
            args.insertBefore--;
          }
          _this.get('tableRowModel').insertAt(args.insertBefore, arrayRowToBeMoved);
          _this.valueChanged();
          _this.grid.invalidateAllRows();
          return _this.grid.render();
        };
      })(this));
      if (this.get('enableDeleteRow')) {
        return this.grid.onClick.subscribe((function(_this) {
          return function(e, args) {
            if (_this.get('enableDeleteRow') && args.cell === _this.get('columnDefinition').length - 1) {
              if (args.row >= _this.getPath('tableRowModel.length')) {
                return;
              }
              _this.get('tableRowModel').removeAt(args.row);
              _this.grid.invalidateAllRows();
              _this.grid.render();
              _this.grid.resizeCanvas();
              return _this.valueChanged();
            }
          };
        })(this));
      }
    }
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.PropertyGrid.TextCellEditor = function(args) {
    var retVal;
    retVal = window.TextCellEditor.apply(this, arguments);
    $(args.container).children('.editor-text').focusout(function() {
      return Slick.GlobalEditorLock.commitCurrentEdit();
    });
    return retVal;
  };

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.RequiredValidatorEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractPropertyEditor.extend({
    templateName: 'ElementOptionsPanel-RequiredValidatorEditor',
    propertyPath: 'validators',
    defaultValue: (function() {
      return [];
    }).property().cacheable(),
    isRequiredValidatorConfigured: (function(k, v) {
      var a, notEmptyValidatorIdentifier, val;
      notEmptyValidatorIdentifier = 'Neos.Flow:NotEmpty';
      if (v !== void 0) {
        a = this.get('value').filter(function(validatorConfiguration) {
          return validatorConfiguration.identifier !== notEmptyValidatorIdentifier;
        });
        this.set('value', a);
        if (v === true) {
          this.get('value').push({
            identifier: notEmptyValidatorIdentifier
          });
        }
        this.valueChanged();
        return v;
      } else {
        val = !!this.get('value').some(function(validatorConfiguration) {
          return validatorConfiguration.identifier === notEmptyValidatorIdentifier;
        });
        return val;
      }
    }).property('value').cacheable()
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractCollectionEditor.extend({
    availableValidators: null,
    availableCollectionElementsBinding: 'availableValidators',
    templateName: 'ElementOptionsPanel-ValidatorEditor',
    prompt: 'Select a validator to add',
    propertyPath: 'validators'
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.DefaultValidatorEditor = Ember.View.extend({
    classNames: ['neos-form-yamlbuilder-validator-editor'],
    templateName: 'Validator-Default',
    required: false,
    collection: null,
    elementIndex: null,
    currentCollectionElement: (function() {
      return this.get('collection').get(this.get('elementIndex'));
    }).property('collection', 'elementIndex').cacheable(),
    valueChanged: Ember.K,
    updateCollectionEditorViews: Ember.K,
    remove: function() {
      this.get('collection').removeAt(this.get('elementIndex'));
      this.valueChanged();
      return this.updateCollectionEditorViews();
    },
    notRequired: (function() {
      return !this.get('required');
    }).property('required').cacheable()
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.MinimumMaximumValidatorEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.DefaultValidatorEditor.extend({
    templateName: 'Validator-MinimumMaximumEditor',
    pathToMinimumOption: 'currentCollectionElement.options.minimum',
    pathToMaximumOption: 'currentCollectionElement.options.maximum',
    minimum: (function(k, v) {
      if (v !== void 0) {
        this.setPath(this.get('pathToMinimumOption'), v);
        this.valueChanged();
        return v;
      } else {
        return this.getPath(this.get('pathToMinimumOption'));
      }
    }).property('pathToMinimumOption').cacheable(),
    maximum: (function(k, v) {
      if (v !== void 0) {
        this.setPath(this.get('pathToMaximumOption'), v);
        this.valueChanged();
        return v;
      } else {
        return this.getPath(this.get('pathToMaximumOption'));
      }
    }).property('pathToMaximumOption').cacheable()
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.SimpleValueValidatorEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.DefaultValidatorEditor.extend({
    templateName: 'Validator-SimpleValueEditor',
    pathToEditedValue: 'currentCollectionElement.options.TODO',
    fieldLabel: Ember.required(),
    value: (function(k, v) {
      if (v !== void 0) {
        this.setPath(this.get('pathToEditedValue'), v);
        this.valueChanged();
        return v;
      } else {
        return this.getPath(this.get('pathToEditedValue'));
      }
    }).property('pathToEditedValue').cacheable()
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.FinisherEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.AbstractCollectionEditor.extend({
    availableFinishers: null,
    availableCollectionElementsBinding: 'availableFinishers',
    templateName: 'ElementOptionsPanel-FinisherEditor',
    prompt: 'Select a finisher to add',
    propertyPath: 'finishers'
  });

  Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.FinisherEditor.EmailFinisherEditor = Neos.Form.YamlBuilder.View.ElementOptionsPanel.Editor.ValidatorEditor.DefaultValidatorEditor.extend({
    templateName: 'Finisher-EmailEditor',
    availableFormats: null,
    format: (function(k, v) {
      var chosenFormatKey, format, len2, m, ref6;
      if (arguments.length >= 2) {
        this.setPath('currentCollectionElement.options.format', v.key);
      }
      chosenFormatKey = this.getPath('currentCollectionElement.options.format');
      ref6 = this.get('availableFormats');
      for (m = 0, len2 = ref6.length; m < len2; m++) {
        format = ref6[m];
        if (format.key === chosenFormatKey) {
          return format;
        }
      }
      return null;
    }).property('availableFormats').cacheable()
  });

}).call(this);
